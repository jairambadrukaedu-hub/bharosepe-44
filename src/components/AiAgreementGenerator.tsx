
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Bot, Sparkles, FileText, CheckCircle, Brain } from 'lucide-react';
import { useAuth } from '@/hooks/use-auth';
import { useUserModeContext } from '@/components/UserModeContext';
import { AIContractService, type ContractGenerationParams } from '@/services/aiContractService';

interface AiAgreementGeneratorProps {
  onComplete: (agreement: string) => void;
  transactionData: any;
}

const AiAgreementGenerator: React.FC<AiAgreementGeneratorProps> = ({
  onComplete,
  transactionData
}) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [progress, setProgress] = useState(0);
  const { user } = useAuth();
  const { userMode } = useUserModeContext();

  const steps = [
    { text: "Analyzing transaction parameters...", duration: 1200, icon: Brain },
    { text: "Generating AI-powered legal terms...", duration: 1800, icon: Sparkles },
    { text: "Creating smart contract clauses...", duration: 1500, icon: FileText },
    { text: "Applying risk assessment...", duration: 1000, icon: CheckCircle },
    { text: "Finalizing intelligent agreement...", duration: 800, icon: Bot }
  ];

  useEffect(() => {
    const generateAgreement = async () => {
      for (let i = 0; i < steps.length; i++) {
        setCurrentStep(i);
        await new Promise(resolve => setTimeout(resolve, steps[i].duration));
        setProgress(((i + 1) / steps.length) * 100);
      }

      // Generate the AI-powered agreement
      const agreement = await generateAdvancedAgreement(transactionData);
      setTimeout(() => onComplete(agreement), 500);
    };

    generateAgreement();
  }, [transactionData, onComplete]);

  const generateAdvancedAgreement = async (data: any) => {
    const { contact, type, details } = data;
    const currentUserIsSeller = userMode === 'Seller';
    
    const contractParams: ContractGenerationParams = {
      transactionType: type,
      amount: Number(details.price) || 0,
      sellerName: currentUserIsSeller ? (user?.user_metadata?.full_name || user?.email || 'User') : (contact?.name || 'Counterparty'),
      buyerName: currentUserIsSeller ? (contact?.name || 'Counterparty') : (user?.user_metadata?.full_name || user?.email || 'User'),
      sellerPhone: currentUserIsSeller ? (user?.user_metadata?.phone || '') : (contact?.phone || 'Phone TBD'),
      buyerPhone: currentUserIsSeller ? (contact?.phone || 'Phone TBD') : (user?.user_metadata?.phone || ''),
      productName: details.productName,
      serviceDescription: details.serviceDescription,
      deliveryDate: details.deliveryDate,
      completionDate: details.completionDate,
      quantity: details.quantity,
      location: details.location,
      customLocation: details.customLocation,
      warranty: details.warranty,
      returnPolicy: details.returnPolicy,
      specialTerms: details.specialTerms
    };

    console.log('AI Contract Generation:', contractParams);
    
    try {
      const result = await AIContractService.generateContract(contractParams);
      return result.content;
    } catch (error) {
      console.error('Error generating AI contract:', error);
      // Fallback to basic template
      return generateBasicAgreement(contractParams);
    }
  };

  const generateBasicAgreement = (params: ContractGenerationParams) => {
    const currentDate = new Date().toLocaleDateString('en-IN');
    return `
# BHAROSE PE ESCROW AGREEMENT

Generated by AI on ${currentDate}

## PARTIES
- **Seller**: ${params.sellerName} (${params.sellerPhone})
- **Buyer**: ${params.buyerName} (${params.buyerPhone})

## TRANSACTION
- **Type**: ${params.transactionType === 'goods' ? 'Sale of Goods' : 'Service Agreement'}
- **Amount**: â‚¹${params.amount.toLocaleString('en-IN')}
- **Details**: ${params.productName || params.serviceDescription || 'As specified'}

## TERMS
1. Payment held in secure escrow until completion
2. 3-day inspection period for verification
3. Dispute resolution through Bharose Pe mediation
4. Governed by Indian laws and regulations

*AI-Generated Agreement - Review before acceptance*
    `.trim();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-bharose-primary/5 to-bharose-secondary/5 flex items-center justify-center p-4">
      <motion.div
        className="max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center"
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {/* AI Bot Icon */}
        <motion.div
          className="w-20 h-20 bg-gradient-to-r from-bharose-primary to-bharose-secondary rounded-full flex items-center justify-center mx-auto mb-6"
          animate={{ rotate: 360 }}
          transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
        >
          <Bot className="h-10 w-10 text-white" />
        </motion.div>

        {/* Title */}
        <h2 className="text-2xl font-bold text-gray-800 mb-2">AI Contract Generator</h2>
        <p className="text-gray-600 mb-2">Powered by Advanced Legal AI</p>
        <p className="text-sm text-gray-500 mb-8">Creating intelligent, customized agreements...</p>

        {/* Progress Bar */}
        <div className="w-full bg-gray-200 rounded-full h-2 mb-6">
          <motion.div
            className="bg-gradient-to-r from-bharose-primary to-bharose-secondary h-2 rounded-full"
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.5 }}
          />
        </div>

        {/* Current Step */}
        <div className="space-y-4">
          {steps.map((step, index) => (
            <motion.div
              key={index}
              className={`flex items-center gap-3 p-3 rounded-lg ${
                index < currentStep ? 'bg-green-50 text-green-700' :
                index === currentStep ? 'bg-bharose-primary/10 text-bharose-primary' :
                'bg-gray-50 text-gray-400'
              }`}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              {index < currentStep ? (
                <CheckCircle className="h-5 w-5 text-green-600" />
              ) : index === currentStep ? (
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                >
                  {React.createElement(step.icon, { className: "h-5 w-5" })}
                </motion.div>
              ) : (
                React.createElement(step.icon, { className: "h-5 w-5" })
              )}
              <span className="text-sm font-medium">{step.text}</span>
            </motion.div>
          ))}
        </div>

        {/* Progress Text */}
        <motion.p
          className="text-sm text-gray-500 mt-6"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
        >
          AI analyzing {transactionData?.type === 'goods' ? 'product specifications' : 'service requirements'} and generating intelligent legal terms...
        </motion.p>
        
        <motion.div
          className="flex items-center justify-center gap-2 mt-4 text-xs text-bharose-primary"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
        >
          <Brain className="h-4 w-4" />
          <span>Powered by Advanced Legal AI</span>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default AiAgreementGenerator;
